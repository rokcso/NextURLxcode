"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "public_posts_data_js";
exports.ids = ["public_posts_data_js"];
exports.modules = {

/***/ "./public/posts/data.js":
/*!******************************!*\
  !*** ./public/posts/data.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postsEn: () => (/* reexport default export from named module */ _postsEn_json__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   postsZh: () => (/* reexport default export from named module */ _postsZh_json__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _postsEn_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./postsEn.json */ \"./public/posts/postsEn.json\");\n/* harmony import */ var _postsZh_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./postsZh.json */ \"./public/posts/postsZh.json\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvcG9zdHMvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFDO0FBQ0E7QUFFVCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3B1YmxpYy9wb3N0cy9kYXRhLmpzPzVhNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBvc3RzRW4gZnJvbSBcIi4vcG9zdHNFbi5qc29uXCI7XG5pbXBvcnQgcG9zdHNaaCBmcm9tIFwiLi9wb3N0c1poLmpzb25cIjtcblxuZXhwb3J0IHsgcG9zdHNFbiwgcG9zdHNaaCB9O1xuIl0sIm5hbWVzIjpbInBvc3RzRW4iLCJwb3N0c1poIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/posts/data.js\n");

/***/ }),

/***/ "./public/posts/postsEn.json":
/*!***********************************!*\
  !*** ./public/posts/postsEn.json ***!
  \***********************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"id":"post01","title":"An Introduction to URLs","excerpt":"This article introduces what URLs are and how they work on the web.","content":"A URL, short for Uniform Resource Locator, is a reference or address for a resource on the Internet. URLs are used to identify the location of files, web pages, images, videos and other resources on the web.    A typical URL consists of several parts, including the protocol, hostname, path and optional query parameters. For example, in the URL https://www.example.com/page?id=1, the protocol is \'https\', the hostname is \'www.example.com\', and the path is \'/page\' followed by a query parameter \'id\'.    When a web browser requests a URL, the domain name system (DNS) first resolves the hostname to an IP address. The browser then sends an HTTP request to that IP address to retrieve the resource. The web server at that address will return the appropriate content based on the path and parameters specified in the URL.    Below are some key components of URLs:    Protocol - The network protocol used such as HTTP, HTTPS, FTP  Hostname - The domain name or IP address of the server   Path - The path to the resource on the host   Parameters - Additional key-value parameters attached to the path  Fragments - An internal page reference within the resource    By structuring URLs in this standard format, it allows resources to be uniquely identified and located on the web. URLs enable seamless navigation between websites, pages and resources across the internet."},{"id":"post02","title":"URL Encoding Explained","excerpt":"This article explains what URL encoding is and why it is used.","content":"URL encoding converts characters into a format that can be transmitted over the Internet. It encodes characters using the percent-encoding mechanism.     In this mechanism, each character is represented as a percent sign % followed by two hexadecimal digits corresponding to the character code. For example, the space character with ASCII code 32 is encoded as %20.    The main reason URL encoding is needed is because URLs can only contain a limited set of characters like alphabets, numbers and some symbols. But data that needs to be transmitted via URLs may contain special characters or symbols that are not allowed.     For example, usernames, passwords or query parameters may have characters like @, &, spaces etc.  To allow such data to be part of URLs, the special characters need to be URL encoded.    Some examples of URL encoding:    @ -> %40  & -> %26   Space -> %20    Without URL encoding, sending such data through URLs would cause errors or could change the meaning of the URL. Additionally, different systems may interpret special characters differently, so encoding helps standardize the format.    In web development, developers need to ensure user-supplied input is properly URL encoded before attaching it to URLs or using it for server requests. Functions like encodeURI() or encodeURIComponent() can be used in JavaScript for encoding.    Most programming languages and web frameworks provide methods for URL encoding and decoding during generation or parsing of URLs parameters."},{"id":"post03","title":"How to Encode URLs in JavaScript","excerpt":"This article shows different methods to encode URLs in JavaScript.","content":"JavaScript provides inbuilt functions to encode URLs and their components:    encodeURI()  This function encodes a complete URL string to convert characters like spaces to %20.    For example:    const url = \'https://www.example.com/path name\'    const encoded = encodeURI(url);    Here encoded will contain the URL with \'path name\' converted to \'path%20name\'.    encodeURIComponent()  This function encodes the individual components of a URL like path, query parameters etc.     For example:     const query = \'user=john doe\'    const encodedQuery = encodeURIComponent(query);     Here it will convert \'john doe\' to \'john%20doe\'.    The main difference between the two is that encodeURI() won\'t encode certain characters that are allowed in URLs like /, ?, =, & etc while encodeURIComponent() will encode everything unsafe.    So encodeURIComponent() can be used when encoding URL parameters while encodeURI() can be used on complete URLs.    The escape() function can also encode strings similarly. But it is not recommended in most cases as it doesn\'t encode as thoroughly as encodeURIComponent().    To decode an encoded string, the decodeURI() and decodeURIComponent() functions can be used."},{"id":"post04","title":"Decoding URL-Encoded Strings","excerpt":"This article shows how to decode URL-encoded strings in various languages.","content":"URL-encoded strings can be decoded back to original format in languages like:    JavaScript:    Use the decodeURI() or decodeURIComponent() functions.    const encoded = \'path%20name\'  const decoded = decodeURI(encoded) // \'path name\'    Python:     Use the urllib.parse.unquote or urllib.parse.unquote_plus functions.    import urllib  decoded = urllib.parse.unquote(encoded)    Java:    Use the java.net.URLDecoder class.    String encoded = \\"path%20name\\";  String decoded = URLDecoder.decode(encoded, \\"UTF-8\\");    PHP:    Use the rawurldecode() or urldecode() functions.     $encoded = \'path%20name\';  $decoded = rawurldecode($encoded);    Ruby:    Use the CGI.unescape() function.    require \'cgi\'  decoded = CGI.unescape(encoded) So in summary, most programming languages provide built-in utilities to easily decode percent-encoded URLs and parameters. The key is to identify the encoded string, and apply the language\'s decoding function on it.    Proper decoding ensures that any encoded strings are converted back to their original intended characters and values."},{"id":"post05","title":"Best Practices for URL Encoding","excerpt":"This article shares some best practices for URL encoding and decoding.","content":"Here are some recommended practices to keep in mind when encoding URLs:    Use encodeURIComponent() instead of escape() in JavaScript: The escape() function does not encode some characters properly. encodeURIComponent() gives fully encoded strings consistently.    Encode user-supplied parameters before embedding in URL: Any input taken from users that needs to go into the URL should be encoded first for safety.    Encode full URLs as well as components: Both complete URLs and individual parts like query strings need encoding for special characters.    Prefer Percent encoding over Hex encoding: Hex encoding like %20 is more compact and universally recognized over %2F.    Encode late, Decode early: Encode just before inserting data into URL, and decode as soon as extracting from URL to avoid errors.    Use UTF-8 for encoding and decoding: UTF-8 can handle all Unicode characters correctly.    Use the language\'s standard library: Rely on well-tested encoding libraries in the language rather than custom utils.    Percent encode all reserved characters: Even reserved chars like /,?,= etc should be encoded in components.    Watch out for double encoding: Applying encoding twice can break decoding, so encode only once.    Test with various input: Use different types of input strings including special characters to test encoding.    By following these best practices, developers can avoid common errors and build more robust handling of URLs and encoded data."}]');

/***/ }),

/***/ "./public/posts/postsZh.json":
/*!***********************************!*\
  !*** ./public/posts/postsZh.json ***!
  \***********************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"id":"post01","title":"URL简介","excerpt":"本文介绍了什么是URL以及它在网页中的作用。","content":"URL(统一资源定位符)是互联网上资源的地址,用来标识网页、图片、视频等资源的位置。典型的URL由几部分组成,包括网络协议、主机名、路径等。例如在https://www.example.com/page?id=1中,协议是“https”,主机名是“www.example.com”,路径是“/page”,后面带有一个“id”查询参数。 当浏览器请求一个URL时,首先将主机名转换为IP地址,然后向该IP地址发送HTTP请求,服务器将根据URL路径和参数返回对应的资源内容。URL的几个常见组成部分:协议 - 网络协议如HTTP、HTTPS、FTP等主机名 - 域名或IP地址路径 - 服务器上资源的路径参数 - 附加在路径上的键值参数片段 - 资源内部的锚点链接通过这种统一的URL格式,互联网上的资源可以被唯一标识和定位。URL使网页、资源之间的链接与导航变得简单。"},{"id":"post02","title":"URL编码解码详解","excerpt":"本文介绍了什么是URL编码以及为什么使用它。","content":"URL编码可以将字符转换为可通过网络传输的格式。它使用百分号编码来对字符进行编码,即每个字符使用%XX的形式来表示,XX是该字符对应的两位十六进制数字。之所以需要URL编码是因为URL只能包含特定的字母、数字和符号。但是像用户名、密码这样的数据就可能包含 URL 不允许的特殊符号。为了让这些数据可以在URL中传输,需要使用URL编码来转换特殊符号。例如:@ 编码为 %40& 编码为 %26空格 编码为 %20没有URL编码,这些特殊字符就可能导致网络传输错误,或者改变URL的含义。此外,不同系统可能对这些特殊符号的解释也不同,URL编码可以标准化表示方法。在Web开发中,开发者需要确保对用户输入的数据在用于URL或服务器请求之前进行适当的URL编码。JavaScript中的encodeURI()和encodeURIComponent()可以用来编码URL。大部分编程语言和Web框架都提供了用于生成和解析URL时的参数编码解码函数。"},{"id":"post03","title":"如何在JavaScript中编码URL","excerpt":"本文展示了在JavaScript中实现URL编码的不同方式。","content":"JavaScript中有两种内置方法可以对URL及其组成部分进行编码:encodeURI()可以对完整的URL进行编码,将空格等字符编码为%20等格式。例如:const url = \'https://www.example.com/path name\' const encoded = encodeURI(url);这里encoded的值会将\'path name\'编码为\'path%20name\'。encodeURIComponent()可以对URL中的各组成部分如路径、查询参数进行编码。例如:const query = \'user=john doe\'const encoded = encodeURIComponent(query);这里就会将\'john doe\'编码为\'john%20doe\'。二者的主要区别是,encodeURI()不会对一些在URL中可保留的字符如:/=?&进行编码,而encodeURIComponent()会编码所有的非安全字符。所以在编码查询参数时更适合使用encodeURIComponent(),在编码完整URL时则使用encodeURI()。escape()函数也可以用于编码,但大部分情况下不推荐,因为它不如encodeURIComponent()全面。编码后的字符串可以使用decodeURI()和decodeURIComponent()进行解码。"},{"id":"post04","title":"解码被URL编码的字符串","excerpt":"本文展示了如何在不同语言中解码被URL编码的字符串。","content":"各种语言解码被URL编码的字符串的方式:JavaScript:使用decodeURI()或decodeURIComponent()。const encoded = \'path%20name\';const decoded = decodeURI(encoded); Python:使用urllib.parse.unquote或urllib.parse.unquote_plus。import urllibdecoded = urllib.parse.unquote(encoded)Java:使用java.net.URLDecoder。String encoded = \\"path%20name\\";String decoded = URLDecoder.decode(encoded, \\"UTF-8\\");PHP:使用rawurldecode()或urldecode()。$encoded = \'path%20name\';$decoded = rawurldecode($encoded);Ruby:使用CGI.unescape()。require \'cgi\'decoded = CGI.unescape(encoded)总结一下,主流语言基本都内置了用于解析URL编码的函数,关键是识别编码后的字符串,并用合适的解码方法处理。正确解码非常必要,以确保编码后的字符串可以转换回原本预期的字符和值。"},{"id":"post05","title":"URL编码的最佳实践","excerpt":"本文分享了一些URL编码和解码的最佳实践。","content":"这里分享几个处理URL编码时的建议:使用encodeURIComponent()而不是escape():后者不能处理某些字符对用户输入数据编码:任何需要嵌入URL的用户输入应先编码编码完整URL及其组成部分:如查询字符串都应该编码优先使用百分号编码:比如%20,更简洁可读晚编码早解码:仅在插入URL前编码,取出后立即解码使用UTF-8编码:它可以支持所有Unicode字符使用语言内置库:如js内置的encodeURIComponent()编码所有保留字符:如/,?,=等在组件中也应编码注意避免重复编码:两次编码会导致解码错误测试不同字符串:用各种特殊字符来测试编码效果按照这些最佳实践,可以避免常见问题,构建健壮的URL编码应用。"}]');

/***/ })

};
;